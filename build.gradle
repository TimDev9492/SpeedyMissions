import org.yaml.snakeyaml.Yaml

// use snakeyaml in the build step to extract values from `plugin.yml`
buildscript {
    dependencies {
        classpath("org.yaml:snakeyaml:2.2")
    }
}

plugins {
    id 'java'
}

def plugin = new Yaml().load(new File("src/main/resources/plugin.yml").newInputStream())

group = 'me.timwastaken'
version = plugin.version

def jarFile = String.format("%s-%s+%s.jar", plugin.name, version, plugin["api-version"])

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url = "https://repo.codemc.org/repository/maven-public/"
    }
}

dependencies {
    implementation("org.apache.commons:commons-lang3:3.0")
    compileOnly("org.spigotmc:spigot-api:1.21.1-R0.1-SNAPSHOT")
    compileOnly("dev.jorel:commandapi-annotations:9.5.3")
    annotationProcessor("dev.jorel:commandapi-annotations:9.5.3")
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.jar {
    archiveFileName.set("$jarFile")
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

task deploy(type: Exec) {
    commandLine = [ "./deploy.sh", "build/libs/$jarFile" ]
}

task cleanBuildDeploy(type: GradleBuild) {
    tasks = ['clean', 'build', 'deploy']
}

// create a task to copy the output files in build/libs to a destination folder
task copyJar(type: Copy) {
    from 'build/libs'
    into 'C:/Users/kerst/Documents/minecraftServer/plugins/'
    include "$jarFile"
}

task printMetadata() {
    doLast {
        println "filename=$jarFile"
        println "version=${plugin["api-version"]}"
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
